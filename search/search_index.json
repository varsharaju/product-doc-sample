{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DevOps and Developer Productivity DevOps is a set of principles and practices that aims at shortening the time to market and improving the customer experience of a software product. The principles and practices are based on the following two foundational ideas. Firstly, that removing boundaries between traditional development and operations silos, and automating the entire software development and delivery process improves developer productivity. This allows teams to spend more time on developing features and less on process and organizational boundaries for releasing code. Secondly, that providing the toolsets to easily operate and manage products in production, automating the feedback loops and shortening the line of site between developer and customer allows developers to empathize more with customer and provide better customer experience. DevOps practices Some of the common practices of DevOps are: Continuous Integration Continuous Testing Continuous Delivery and Deployment Version control and central management of artifacts Monitoring and Continuous operations Infrastructure as code Infrastructure on demand Cloud, Containerization and orchestration Centralized logging","title":"DevOps and Developer Productivity"},{"location":"#devops-and-developer-productivity","text":"DevOps is a set of principles and practices that aims at shortening the time to market and improving the customer experience of a software product. The principles and practices are based on the following two foundational ideas. Firstly, that removing boundaries between traditional development and operations silos, and automating the entire software development and delivery process improves developer productivity. This allows teams to spend more time on developing features and less on process and organizational boundaries for releasing code. Secondly, that providing the toolsets to easily operate and manage products in production, automating the feedback loops and shortening the line of site between developer and customer allows developers to empathize more with customer and provide better customer experience.","title":"DevOps and Developer Productivity"},{"location":"#devops-practices","text":"Some of the common practices of DevOps are: Continuous Integration Continuous Testing Continuous Delivery and Deployment Version control and central management of artifacts Monitoring and Continuous operations Infrastructure as code Infrastructure on demand Cloud, Containerization and orchestration Centralized logging","title":"DevOps practices"},{"location":"casestudies/","text":"Projects Lead the architecture, design, development, rollout of CICD, Infrastructure provisioning, Build, Release, Deployment, Quality assurance, and workflow automation, tools and solutions across various business units Evangelize solutions, tools, products, processes, programs, strategy and vision for DevOps and Customer Success in the organization to improve developer productivity and enable teams to go from code commit to production rapidly and frequently Lead teams across various functional groups without direct authority to provide cloud provisioning and CICD solutions to various services Work closely with users, focus on relationship management, on-boarding, adoption, support and on-going feature feedback, development and rollout of solutions Work closely with leadership, product managers, program managers, engineers, architects, specialists, peers to define product roadmaps, integrations, end of life plans and execute the plan to completion Dive into the details, learn, and prepare presentations, how to videos, user documentation and training material on supported products. Train team members on usage of the tools, products, processes, and benefits. Lead a team of engineers through various organizational changes including product merges, team merges, product support transition, product retirement, DevOps transition, Agile transition, centralization, cloud migration, and migrations to support standardization of tools Lead teams with and without direct authority across functional units through various business outcomes as the company transitioned from desktop to online to cloud to containers and Kubernetes with focus on improving developer productivity ( CICD, Infrastructure provisioning, Automated Onboarding) Work closely with users in Intuit to on-board services onto the new solutions and provide continuity Evangelize and advocate open source culture and work on building a community of developers to support a growing user base with extensive training, process setup and handoff with Stackoverflow, GitHub etc. Document program, product, process, team details for easy accessibility by engineers to use the platform and support it ( Includes user guides, FAQs, Runbooks, How-to videos, training material and labs ) Define, automate and rollout support processes with close oversight in ensuring the program is successful Develop build, release, and deployment automation for .NET, VB6, VB.NET,MSBUILD, Visual Studio, Java, C++, Make, Ant, Maven based applications using Perl, Jenkins, SVN, Perforce Define skill set and interviews to hire into the role. Define customer success and solutions engineering role and set vision for the same. Work with direct reports for their career progression Speak at Jenkins World 2016 conference about using Sonatype NexusPro and Lifecycle to get higher quality and secure releases Speak at Nexus meetup about NexusPro Staging","title":"Customers"},{"location":"casestudies/#projects","text":"Lead the architecture, design, development, rollout of CICD, Infrastructure provisioning, Build, Release, Deployment, Quality assurance, and workflow automation, tools and solutions across various business units Evangelize solutions, tools, products, processes, programs, strategy and vision for DevOps and Customer Success in the organization to improve developer productivity and enable teams to go from code commit to production rapidly and frequently Lead teams across various functional groups without direct authority to provide cloud provisioning and CICD solutions to various services Work closely with users, focus on relationship management, on-boarding, adoption, support and on-going feature feedback, development and rollout of solutions Work closely with leadership, product managers, program managers, engineers, architects, specialists, peers to define product roadmaps, integrations, end of life plans and execute the plan to completion Dive into the details, learn, and prepare presentations, how to videos, user documentation and training material on supported products. Train team members on usage of the tools, products, processes, and benefits. Lead a team of engineers through various organizational changes including product merges, team merges, product support transition, product retirement, DevOps transition, Agile transition, centralization, cloud migration, and migrations to support standardization of tools Lead teams with and without direct authority across functional units through various business outcomes as the company transitioned from desktop to online to cloud to containers and Kubernetes with focus on improving developer productivity ( CICD, Infrastructure provisioning, Automated Onboarding) Work closely with users in Intuit to on-board services onto the new solutions and provide continuity Evangelize and advocate open source culture and work on building a community of developers to support a growing user base with extensive training, process setup and handoff with Stackoverflow, GitHub etc. Document program, product, process, team details for easy accessibility by engineers to use the platform and support it ( Includes user guides, FAQs, Runbooks, How-to videos, training material and labs ) Define, automate and rollout support processes with close oversight in ensuring the program is successful Develop build, release, and deployment automation for .NET, VB6, VB.NET,MSBUILD, Visual Studio, Java, C++, Make, Ant, Maven based applications using Perl, Jenkins, SVN, Perforce Define skill set and interviews to hire into the role. Define customer success and solutions engineering role and set vision for the same. Work with direct reports for their career progression Speak at Jenkins World 2016 conference about using Sonatype NexusPro and Lifecycle to get higher quality and secure releases Speak at Nexus meetup about NexusPro Staging","title":"Projects"},{"location":"partners/","text":"Tools user Jenkins Puppet Chef Docker Spinnaker Kubernetes AWS Maven Perl Go Lang Nexus etc....","title":"Partners"},{"location":"partners/#tools-user","text":"Jenkins Puppet Chef Docker Spinnaker Kubernetes AWS Maven Perl Go Lang Nexus etc....","title":"Tools user"},{"location":"product/build/","text":"Build Automation Coming Soon","title":"Build Automation"},{"location":"product/build/#build-automation","text":"Coming Soon","title":"Build Automation"},{"location":"product/cicd/","text":"CI/CD CI/CD or Continuous Integration and Continuous Delivery and Deployment is a DevOps practice that aims at shortening time to market of new features and changes in a software product and improving developer productivity by automating the entire software release process from conception to delivery. Continuous Integration focuses on enabling teams to continuously integrate changes to main line, test them multiple times a day, and recover quickly from failures with consistent feedback loop. Continuous Delivery focuses on enabling teams to automatically deliver specific versions of the product to different environments and go through a set of tests. Continuous Deployment focuses on enabling teams to go automatically from code commit to production using the continuous integration and continuous delivery solutions along with promotion criteria that defines the readiness of the change to be released through a set of stages and finally to production The main outcome of this practice is a CI/CD pipeline which continuously builds, deploys, tests, and promotes or drops changes through a set of stages before releasing it to production. A CI/CD pipeline highlighting Continuous Integration, Delivery, and Deployment is given in the diagram below: Continuous Integration Continuous integration allows integration of code changes to the main line multiple times a day and allows for fast recovery by automatically building and testing these changes and providing constant and quick feedback to the committers. The outcome of Continuous Integration is a versioned deployable artifact that is stored in an artifact repository for consumption later by other services or for deployment. The main components of continuous integration are Continuous merges: Done using version control tools like Github, Perforce Automated builds : Done using standard build tools like Maven, Gradle, make, docker (for containers) Automated testing : Done using tools like junit Code Coverage calculation : Done using tools like JaCoCo and Cobertura Static Code Analysis : Done using tools like Checkstyle, Findbugs etc. Promotion Criteria, Change Monitoring, and Feedback Loop : Done using CI tools like Jenkins Artifact Storage: Done using tools like Nexus, Artifactory, Docker hub, PyPi etc. Continuous Delivery and Deployment Continuous delivery is a practice that allows repetitive deployment of different versions of the application/service to different environments in a consistent and fail-safe way for testing. The deployment includes install and configuration of the new version of the software to support different hardware and testing requirements. A continuous delivery pipeline automatically deploys product artifacts created by the build stage to various environments and runs automatic tests on the application. It also automatically uses the test results to validate promotion criteria and promote the build to the next environment. While promotion to preproduction environments is automatic, the promotion to production is manual. A continuous deployment pipeline will also look the same with the exception that promotion to production is automatic and not manual. Main components of Continuous Delivery and Deployment are: Deployment Automation : Done using tools like Puppet, Chef, Scripts, Kubectl, AMIs etc. Test Automation : Promotion Criteria, and Feedback Loop : Done using tools like Jenkins, Spinnaker etc. Pipelines and Branching Models The size and complexity of code bases, number of developers and amount of automated testing available often drives the branching pattern used in release management of a software product. The CI/CD pipelines can be tailored to fit the branching needs of a development team. The recommended branching model to get maximum productivity and shortest release time is the master only model with feature flags. All commits on the main line go through build, deploy and test stages and are either dropped or queued up for production. For testing changes before merging/integrating to master, builds can also be triggered on pull request branches. Pull requests also allow for peer review before merging to master to keep the master healthy. This model works well for micro-services, small code bases, and small development teams that follow good agile, tdd, feature flag, and devops practices and which are on the cloud. This however, does not support monolithic code bases, large development teams with long standing releases, teams that do not have much automated testing, or teams that have limited environments/hardware in traditional data centers. Some branching models and pipelines associated are described below: Build automation Coming Soon Deploy automation Coming Soon Infrastructure provisioning Coming Soon Containerization and orchestration Coming Soon","title":"CICD"},{"location":"product/cicd/#cicd","text":"CI/CD or Continuous Integration and Continuous Delivery and Deployment is a DevOps practice that aims at shortening time to market of new features and changes in a software product and improving developer productivity by automating the entire software release process from conception to delivery. Continuous Integration focuses on enabling teams to continuously integrate changes to main line, test them multiple times a day, and recover quickly from failures with consistent feedback loop. Continuous Delivery focuses on enabling teams to automatically deliver specific versions of the product to different environments and go through a set of tests. Continuous Deployment focuses on enabling teams to go automatically from code commit to production using the continuous integration and continuous delivery solutions along with promotion criteria that defines the readiness of the change to be released through a set of stages and finally to production The main outcome of this practice is a CI/CD pipeline which continuously builds, deploys, tests, and promotes or drops changes through a set of stages before releasing it to production. A CI/CD pipeline highlighting Continuous Integration, Delivery, and Deployment is given in the diagram below:","title":"CI/CD"},{"location":"product/cicd/#continuous-integration","text":"Continuous integration allows integration of code changes to the main line multiple times a day and allows for fast recovery by automatically building and testing these changes and providing constant and quick feedback to the committers. The outcome of Continuous Integration is a versioned deployable artifact that is stored in an artifact repository for consumption later by other services or for deployment. The main components of continuous integration are Continuous merges: Done using version control tools like Github, Perforce Automated builds : Done using standard build tools like Maven, Gradle, make, docker (for containers) Automated testing : Done using tools like junit Code Coverage calculation : Done using tools like JaCoCo and Cobertura Static Code Analysis : Done using tools like Checkstyle, Findbugs etc. Promotion Criteria, Change Monitoring, and Feedback Loop : Done using CI tools like Jenkins Artifact Storage: Done using tools like Nexus, Artifactory, Docker hub, PyPi etc.","title":"Continuous Integration"},{"location":"product/cicd/#continuous-delivery-and-deployment","text":"Continuous delivery is a practice that allows repetitive deployment of different versions of the application/service to different environments in a consistent and fail-safe way for testing. The deployment includes install and configuration of the new version of the software to support different hardware and testing requirements. A continuous delivery pipeline automatically deploys product artifacts created by the build stage to various environments and runs automatic tests on the application. It also automatically uses the test results to validate promotion criteria and promote the build to the next environment. While promotion to preproduction environments is automatic, the promotion to production is manual. A continuous deployment pipeline will also look the same with the exception that promotion to production is automatic and not manual. Main components of Continuous Delivery and Deployment are: Deployment Automation : Done using tools like Puppet, Chef, Scripts, Kubectl, AMIs etc. Test Automation : Promotion Criteria, and Feedback Loop : Done using tools like Jenkins, Spinnaker etc.","title":"Continuous Delivery and Deployment"},{"location":"product/cicd/#pipelines-and-branching-models","text":"The size and complexity of code bases, number of developers and amount of automated testing available often drives the branching pattern used in release management of a software product. The CI/CD pipelines can be tailored to fit the branching needs of a development team. The recommended branching model to get maximum productivity and shortest release time is the master only model with feature flags. All commits on the main line go through build, deploy and test stages and are either dropped or queued up for production. For testing changes before merging/integrating to master, builds can also be triggered on pull request branches. Pull requests also allow for peer review before merging to master to keep the master healthy. This model works well for micro-services, small code bases, and small development teams that follow good agile, tdd, feature flag, and devops practices and which are on the cloud. This however, does not support monolithic code bases, large development teams with long standing releases, teams that do not have much automated testing, or teams that have limited environments/hardware in traditional data centers. Some branching models and pipelines associated are described below:","title":"Pipelines and Branching Models"},{"location":"product/cicd/#build-automation","text":"Coming Soon","title":"Build automation"},{"location":"product/cicd/#deploy-automation","text":"Coming Soon","title":"Deploy automation"},{"location":"product/cicd/#infrastructure-provisioning","text":"Coming Soon","title":"Infrastructure provisioning"},{"location":"product/cicd/#containerization-and-orchestration","text":"Coming Soon","title":"Containerization and orchestration"},{"location":"product/containers/","text":"Containerization and orchestration Coming Soon","title":"Containerization and orchestration"},{"location":"product/containers/#containerization-and-orchestration","text":"Coming Soon","title":"Containerization and orchestration"},{"location":"product/deploy/","text":"Deploy Automation Coming Soon","title":"Deploy Automation"},{"location":"product/deploy/#deploy-automation","text":"Coming Soon","title":"Deploy Automation"},{"location":"product/infrastructure/","text":"Infrastructure Provisioning Traditional Data Center AWS cloud Kubernetes Coming Soon","title":"Infrastructure Provisioning"},{"location":"product/infrastructure/#infrastructure-provisioning","text":"","title":"Infrastructure Provisioning"},{"location":"product/infrastructure/#traditional-data-center","text":"","title":"Traditional Data Center"},{"location":"product/infrastructure/#aws-cloud","text":"","title":"AWS cloud"},{"location":"product/infrastructure/#kubernetes","text":"Coming Soon","title":"Kubernetes"},{"location":"support/help/","text":"Contact and Feedback Email me","title":"Support"},{"location":"support/help/#contact-and-feedback","text":"Email me","title":"Contact and Feedback"},{"location":"training/presentations/","text":"Presentations Jenkins World 2016 Talk Training Video Check out this cool video AWS CLI Configuration Tutorials Exercise 1 : Setup AWS cli Info This lab involves setting up the AWS cli on your laptop to work with your resources in AWS Install aws cli for your machine using instructions provided here Configure your profiles for each AWS account that you will be accessing aws configure --profile test1 AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY Default region name [None]: us-west-2 Default output format [None]: json This should create the [test1] profile with the required credentials, region, and output information in ~/.aws/credentials and ~/.aws/config files You should now be able to use aws cli to work with resources in that account that you have been provided access to For example: aws s3 cp s3://mybucket/mykey .","title":"Training"},{"location":"training/presentations/#presentations","text":"Jenkins World 2016 Talk","title":"Presentations"},{"location":"training/presentations/#training-video","text":"Check out this cool video AWS CLI Configuration","title":"Training Video"},{"location":"training/presentations/#tutorials","text":"","title":"Tutorials"},{"location":"training/presentations/#exercise-1-setup-aws-cli","text":"Info This lab involves setting up the AWS cli on your laptop to work with your resources in AWS Install aws cli for your machine using instructions provided here Configure your profiles for each AWS account that you will be accessing aws configure --profile test1 AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY Default region name [None]: us-west-2 Default output format [None]: json This should create the [test1] profile with the required credentials, region, and output information in ~/.aws/credentials and ~/.aws/config files You should now be able to use aws cli to work with resources in that account that you have been provided access to For example: aws s3 cp s3://mybucket/mykey .","title":"Exercise 1 : Setup AWS cli"}]}